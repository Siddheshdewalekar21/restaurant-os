// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model for authentication and role-based access
model User {
  id             String    @id @default(uuid())
  name           String
  email          String    @unique
  emailVerified  DateTime?
  password       String
  image          String?
  role           Role      @default(STAFF)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  branch         Branch?   @relation(fields: [branchId], references: [id])
  branchId       String?
  accounts       Account[]
  sessions       Session[]
  orders         Order[]
}

// Account model for OAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  MANAGER
  STAFF
  CUSTOMER
}

// Branch model for multi-branch support
model Branch {
  id          String    @id @default(uuid())
  name        String
  address     String
  phoneNumber String
  email       String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  users       User[]
  tables      Table[]
  orders      Order[]
  inventory   Inventory[]
  location    Location?
  reservations Reservation[]
}

// Menu category model
model Category {
  id        String    @id @default(uuid())
  name      String
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  menuItems MenuItem[]
}

// Menu item model
model MenuItem {
  id          String    @id @default(uuid())
  name        String
  description String?
  price       Decimal   @db.Decimal(10, 2)
  image       String?
  isAvailable Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  orderItems  OrderItem[]
  ingredients InventoryUsage[]
}

// Table model for dine-in management
model Table {
  id          String   @id @default(uuid())
  tableNumber Int
  capacity    Int
  status      TableStatus @default(AVAILABLE)
  positionX   Int      @default(0)
  positionY   Int      @default(0)
  shape       String   @default("CIRCLE")
  width       Int      @default(100)
  height      Int      @default(100)
  branchId    String
  branch      Branch   @relation(fields: [branchId], references: [id])
  orders      Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reservations Reservation[]
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  CLEANING
}

// Order model
model Order {
  id              String    @id @default(uuid())
  orderNumber     String    @unique
  status          OrderStatus @default(PENDING)
  type            OrderType @default(DINE_IN)
  total           Decimal   @db.Decimal(10, 2)
  tax             Decimal   @db.Decimal(10, 2)
  discount        Decimal   @db.Decimal(10, 2) @default(0)
  grandTotal      Decimal   @db.Decimal(10, 2)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   PaymentMethod?
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  items           OrderItem[]
  tableId         String?
  table           Table?    @relation(fields: [tableId], references: [id])
  userId          String?
  user            User?     @relation(fields: [userId], references: [id])
  branchId        String
  branch          Branch    @relation(fields: [branchId], references: [id])
  customerId      String?
  customer        Customer? @relation("CustomerOrders", fields: [customerId], references: [id])
  payment         Payment?
  deliveryInfo    DeliveryInfo?
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  COMPLETED
  CANCELLED
}

enum OrderType {
  DINE_IN
  TAKEAWAY
  DELIVERY
  ONLINE
}

// Order item model
model OrderItem {
  id          String    @id @default(uuid())
  quantity    Int
  price       Decimal   @db.Decimal(10, 2)
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     String
  menuItem    MenuItem  @relation(fields: [menuItemId], references: [id])
  menuItemId  String
}

// Payment model with enhanced payment gateway support
model Payment {
  id                String         @id @default(uuid())
  amount            Decimal        @db.Decimal(10, 2)
  paymentMethod     PaymentMethod  @default(CASH)
  paymentStatus     PaymentStatus  @default(PENDING)
  paymentReference  String?
  gatewayName       String?        // Name of payment gateway (RAZORPAY, STRIPE, etc.)
  gatewayOrderId    String?        // Order ID from payment gateway
  gatewayPaymentId  String?        // Payment ID from payment gateway
  transactionId     String?
  receiptUrl        String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  order             Order          @relation(fields: [orderId], references: [id])
  orderId           String         @unique
  splitPayments     SplitPayment[]
}

// Split payment model for handling split bills
model SplitPayment {
  id                String         @id @default(uuid())
  amount            Decimal        @db.Decimal(10, 2)
  paymentMethod     PaymentMethod  @default(CASH)
  paymentStatus     PaymentStatus  @default(PENDING)
  paymentReference  String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  payment           Payment        @relation(fields: [paymentId], references: [id])
  paymentId         String
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  UPI
  WALLET
  ONLINE
  RAZORPAY
  STRIPE
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

// Inventory management models
model Inventory {
  id          String    @id @default(uuid())
  name        String
  quantity    Int
  unit        String
  minQuantity Int      @default(0)
  costPrice   Decimal  @db.Decimal(10, 2)
  branchId    String
  branch      Branch   @relation(fields: [branchId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  usages      InventoryUsage[]
}

model InventoryUsage {
  id          String    @id @default(uuid())
  quantity    Int
  menuItem    MenuItem  @relation(fields: [menuItemId], references: [id])
  menuItemId  String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Customer management models
model Customer {
  id          String    @id @default(uuid())
  name        String
  email       String?   @unique
  phone       String?   @unique
  address     String?
  points      Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orders      Order[]   @relation("CustomerOrders")
  feedback    Feedback[]
  reservations Reservation[]
}

model Feedback {
  id          String    @id @default(uuid())
  rating      Int
  comment     String?
  createdAt   DateTime  @default(now())
  customer    Customer  @relation(fields: [customerId], references: [id])
  customerId  String
}

// Reservation management model
model Reservation {
  id          String    @id @default(uuid())
  date        DateTime
  time        DateTime
  partySize   Int
  status      ReservationStatus @default(PENDING)
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  customer    Customer  @relation(fields: [customerId], references: [id])
  customerId  String
  table       Table     @relation(fields: [tableId], references: [id])
  tableId     String
  branch      Branch    @relation(fields: [branchId], references: [id])
  branchId    String
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

// Delivery management model
model DeliveryInfo {
  id              String    @id @default(uuid())
  address         String
  city            String
  state           String
  postalCode      String
  contactNumber   String
  deliveryNotes   String?
  deliveryStatus  String    @default("PENDING")
  assignedTo      String?
  estimatedTime   DateTime?
  actualTime      DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  order           Order     @relation(fields: [orderId], references: [id])
  orderId         String    @unique
  location        Location? @relation(fields: [locationId], references: [id])
  locationId      String?
}

// Location tracking model
model Location {
  id            String    @id @default(uuid())
  latitude      Float
  longitude     Float
  address       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  branch        Branch    @relation(fields: [branchId], references: [id])
  branchId      String    @unique
  deliveryInfo  DeliveryInfo[]
}

// Integration models for third-party services
model Integration {
  id            String    @id @default(uuid())
  name          String
  type          IntegrationType
  status        IntegrationStatus @default(INACTIVE)
  apiKey        String?
  apiSecret     String?
  accessToken   String?
  refreshToken  String?
  settings      Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  webhooks      Webhook[]
}

model Webhook {
  id            String    @id @default(uuid())
  url           String
  secret        String?
  events        String[]
  status        WebhookStatus @default(ACTIVE)
  lastCalled    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  integration   Integration @relation(fields: [integrationId], references: [id])
  integrationId String
}

enum IntegrationType {
  PAYMENT_GATEWAY
  DELIVERY_SERVICE
  ACCOUNTING
  INVENTORY
  POS
}

enum IntegrationStatus {
  ACTIVE
  INACTIVE
  ERROR
  PENDING
}

enum WebhookStatus {
  ACTIVE
  INACTIVE
  ERROR
}

// QR Code model for table and menu access
model QRCode {
  id          String    @id @default(uuid())
  type        String    // TABLE, MENU, PAYMENT
  reference   String    // Reference ID (table ID, menu ID, etc.)
  code        String    @unique
  scans       Int       @default(0)
  isActive    Boolean   @default(true)
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
